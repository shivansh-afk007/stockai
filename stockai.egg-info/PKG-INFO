Metadata-Version: 2.4
Name: stockai
Version: 1.0.0
Summary: AI-powered stock analysis for Indian markets
Home-page: https://github.com/yourusername/stockai
Author: Your Name
Author-email: your.email@example.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: yfinance>=0.2.36
Requires-Dist: pandas>=2.2.0
Requires-Dist: numpy>=1.26.3
Requires-Dist: scikit-learn>=1.3.2
Requires-Dist: fastapi>=0.109.0
Requires-Dist: uvicorn>=0.27.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: beautifulsoup4>=4.12.2
Requires-Dist: transformers>=4.36.2
Requires-Dist: torch>=2.1.2
Requires-Dist: ta>=0.10.2
Requires-Dist: kiteconnect>=4.2.0
Requires-Dist: python-telegram-bot>=20.7
Requires-Dist: plotly>=5.18.0
Requires-Dist: dash>=2.14.2
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# StockAI - AI-Powered Stock Analysis for Indian Markets

StockAI is a comprehensive stock analysis platform that combines technical analysis, sentiment analysis, and machine learning to provide insights for Indian stock market investors.

## Features

- **Real-time Stock Data**: Fetch and cache real-time stock data from Yahoo Finance
- **Technical Analysis**: Calculate and visualize various technical indicators
  - RSI (Relative Strength Index)
  - MACD (Moving Average Convergence Divergence)
  - Bollinger Bands
  - Moving Averages (SMA, EMA)
  - Support and Resistance Levels
  - Volume Analysis
- **Sentiment Analysis**: Analyze market sentiment using news and social media
  - News sentiment analysis using FinBERT
  - Real-time news aggregation
  - Sentiment scoring and classification
- **Modern Web Interface**: Interactive dashboard built with Dash
  - Responsive design
  - Real-time updates
  - Interactive charts
  - User-friendly controls

## Project Structure

```
stockai/
â”œâ”€â”€ requirements.txt        # Project dependencies
â”œâ”€â”€ README.md              # Project documentation
â”œâ”€â”€ src/                   # Source code
â”‚   â”œâ”€â”€ data/             # Data fetching and processing
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â””â”€â”€ stock_data.py
â”‚   â”œâ”€â”€ analysis/         # Analysis modules
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ technical.py
â”‚   â”‚   â””â”€â”€ sentiment.py
â”‚   â”œâ”€â”€ api/              # FastAPI backend
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â””â”€â”€ main.py
â”‚   â””â”€â”€ dashboard/        # Dash frontend
â”‚       â”œâ”€â”€ __init__.py
â”‚       â”œâ”€â”€ app.py
â”‚       â””â”€â”€ assets/
â”‚           â””â”€â”€ style.css
â””â”€â”€ tests/                # Unit tests
    â”œâ”€â”€ __init__.py
    â””â”€â”€ test_stock_analysis.py
```

## Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/stockai.git
cd stockai
```

2. Create and activate a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

## Usage

1. Start the FastAPI backend:
```bash
cd src/api
uvicorn main:app --reload
```

2. Start the Dash frontend:
```bash
cd src/dashboard
python app.py
```

3. Open your browser and navigate to:
- Dashboard: http://localhost:8050
- API Documentation: http://localhost:8000/docs

## API Endpoints

### Stock Analysis
- `POST /analyze`: Comprehensive stock analysis
  ```json
  {
    "symbol": "RELIANCE.NS",
    "start_date": "2024-01-01",
    "end_date": "2024-03-01",
    "include_technical": true,
    "include_sentiment": true
  }
  ```

### Technical Analysis
- `GET /technical/{symbol}`: Get technical analysis for a stock
  - Query parameters:
    - `start_date`: Analysis start date
    - `end_date`: Analysis end date

### Sentiment Analysis
- `GET /sentiment/{symbol}`: Get sentiment analysis for a stock

### Stock Information
- `GET /stock_info/{symbol}`: Get basic stock information

## Development

### Running Tests
```bash
python -m pytest tests/
```

### Code Style
The project follows PEP 8 style guidelines. Use `black` for code formatting:
```bash
black src/
```

## Dependencies

- **Data Processing**
  - yfinance: Yahoo Finance data
  - pandas: Data manipulation
  - numpy: Numerical computations

- **Analysis**
  - scikit-learn: Machine learning
  - ta: Technical analysis
  - transformers: FinBERT model
  - beautifulsoup4: Web scraping

- **Backend**
  - fastapi: API framework
  - uvicorn: ASGI server

- **Frontend**
  - dash: Web framework
  - plotly: Interactive charts

## Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- [FinBERT](https://huggingface.co/ProsusAI/finbert) for financial sentiment analysis
- [ta](https://technical-analysis-library-in-python.readthedocs.io/) for technical analysis indicators
- [yfinance](https://github.com/ranaroussi/yfinance) for stock data

## Contact

For questions and feedback, please open an issue on GitHub. 
